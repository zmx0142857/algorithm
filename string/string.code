# [find pattern P in text T]
#
# in the following example, an offset of s=4 matches q=5 chars:
# 
# [ b a c b a b a b a a b c b a b ] T
#			| | | | |
#  s ---> [ a b a b a c a ] P
#
# note that pi[q] = k=3, that is to say, P[0:k-1] is the longest prefix
# of P to be a postfix of P[0:q-1]:
#
# [a b a b a ] P[0:q-1] := P_q
#	   | | |
#    [ a b a ] P[0:k-1] := P_k
#
# so the next possible offset is s + (q - pi[q]) = s + 2.


# [compute the prefix function]
#
# ITERATIVE LEMMA OF PREFIX FUNCTION:
# let P is a pattern of length m, pi is the prefix function of P.
#
#	pi*[q] := { k: k < q and p[0:k-1] is postfix of p[0:q-1] },
#	pi[q] := max pi*[q].
#
# we assert that the iteration of pi[q] exhausts the set pi*[q],
# in other words, if we denote
#
#		pi^n[q] = { pi[q],				if n = 1;
#				  { pi[ pi^(n-1)[q] ],	if n > 1.
#
# then
#
#	pi*[q] = {pi^1[q], pi^2[q], ..., pi^t[q] = 0}.


# p is a string pattern, suppose p.length > 0
compute_prefix_function(p):
	m = p.length
	pi = new array[m]
	pi[0] = -1
	k = -1
	for q = 1..m-1:
		while k != -1 and p[k+1] != p[q]:
			k = pi[k]
		if p[k+1] == p[q]:
			++k
		pi[q] = k
	return pi

# O(m + n)
kmp_matcher(text, pattern):
	n = text.length
	m = pattern.length
	pi = compute_prefix_function(pattern)
	q = -1
	for i = 0..n-1:
		while q != -1 and pattern[q+1] != text[i]:
			q = pi[q]
		if pattern[q+1] == text[i]:
			++q
			if q == m-1:
				print("pattern occurs in ", i-q)
				q = pi[q]


# argument to int
# convert string to int (range INT_MIN ~ INT_MAX)
# usually, INT_MIN = -2147483648, INT_MAX = 2147483647
atoi(x):
	ret = 0
	i = 0
	negative = false
	# empty str returns 0
	if x.empty():
		return 0
	# eat spaces
	while i != x.length() and isspace(x[i]):
		++i
	# check the sign
	if x[i] == '+':
		++i
	elif x[i] == '-':
		--i
		negative = true
	# read the digits
	while i != x.length() and isdigit(x[i]):
		diff = x[i] - '0'
		# if ret > (INT_MAX - diff)/10:
			# return INT_MIN if negative else INT_MAX
		ret = 10 * ret + diff
		++i
	return -ret if negative else ret

# returns true iff the str is palindorme
# example: Able was I, ere I saw Elba.
# A man, a plan, a canal; Panama.
is_palindrome(str):
	beg = str
	end = str + str.length-1
	while beg < end:
		while !isalpha(*beg):
			++beg
		while !isalpha(*end):
			--end
		if tolower(*beg) != tolower(*end):
			return false
		++beg
		--end
	return true

# find first char in str that matches condition
# returns end of str if not found
#
# [example]
# find first blank char: find_if(str, isspace)
# find first non-blank char: find_if(str, isprint)
# find beginning of the next word: find_if(find_if(str, isspace), isprint)
find_if(str, condition):
	while *str != '\0' and !condition(*str):
		++str
	return str
