习题 7

1. 对于图 7.26 所示的带权有向图:

	图 7.26

     .----------- v0 -----------.
	 |    6       ^       5     |                                  
	 |            |             |                                  
	 |            |4            |                                  
	 v            |             v                                  
	 v1           v2            v3                                 
	 |            |             |                                   
	 |1           |1           2|                                   
	 |            |             |                                   
	 |            v   8      4  v                                   
	 '----------> v4 --> v5 <-- v6                                 
	              |             |                                   
	              |9           4|                                   
	              |             |                                   
	              v      2      v                                   
	              v7 ---------> v8                                  
	                                                                
	(1) 写出其相邻矩阵;
	(2) 画出其邻接表表示;
	(3) 计算每个顶点的入度和出度;
	(4) 如果每个指针需要 4 个字节, 每个顶点的标号需要 2 个字节,
	每条边的权需要 2 个字节, 则此图采用哪种表示法所需要的空间较少?

	答: 
	(1)	 0  6 oo  5 oo oo oo oo oo
		oo  0 oo oo oo  1 oo oo oo
		4  oo  0 oo  1 oo oo oo oo
		oo oo oo  0 oo oo  2 oo oo
		oo oo oo oo  0  8 oo  9 oo
		oo oo oo oo oo  0 oo oo oo
		oo oo oo oo oo  4  0 oo  4
		oo oo oo oo oo oo oo  0  2
		oo oo oo oo oo oo oo oo  0

		81 * 2 = 162 bytes

	(2) 0 -> (1, 6) -> (3, 5) -> NULL
		1 -> (4, 1) -> NULL
		2 -> (0, 4) -> (3, 1) -> NULL
		3 -> (6, 2) -> NULL
		4 -> (5, 8) -> (7, 9) -> NULL
		5 -> NULL
		6 -> (5, 4) -> (8, 4) -> NULL
		7 -> (8, 2) -> NULL
		8 -> NULL

		20 * 4 + 19 * 2 + 11 = 129 bytes

	(3) 顶点	入度	出度
		0		1		2
		1		1		1
		2		0		2
		3		1		1
		4		1		2
		5		3		0
		6		1		2
		7		1		1
		8		2		0

	(4) 邻接表表示更省空间.

2. 对于图 7.27 所示的有向图, 从顶点 v1 出发分别画出其深度优先搜索 (DFS)
和广度优先搜索 (BFS) 的生成森林.

	图 7.27

	v1 <--- v0 ---> v2 <-------- v3 ---.
	|               |            |     v
	|               |            |     v4
	v               v            v     |
	v5 -----------> v6 <-------- v7 <--'

7. 有向图 G = <V, E> 的转置是图 G^T = <V, E^T>, 其中边 <u, v> in E^T,
当且仅当 <v, u> in E, 即 G^T 就是逆转 G 中所有的方向而得到的图.
试按照相邻矩阵和邻接表两种表示法写出从 G 计算 G^T 的有效算法,
并确定算法的时间复杂度.

12. Dijkstra 最短路径算法是否给出一棵生成树? 是否给出一棵最小生成树 (MST)?
证明你的结论.

	答: 是的; 是的.

13. 设计算法找图 (有向图或无向图) 的所有连通分量
(对于有向图则是强连通分量). 提示:
第一个连通分量的所有顶点使用第一分量的标记,
第二个连通分量的所有顶点使用第二分量的标记, 依次类推.

	答: 不如使用并查集.

18. 采用相邻矩阵表示一个有向图 G, 写出一个算法确定 G 是否含有一个漏
(即入度为 n-1, 出度为 0 的顶点), 要求该算法的时间复杂度是 O(n^2).

	find_leak(G):
		for from = 0; from < n; ++from:
			for to = 0; to < n; ++to:
				if from == to:
					continue
				if G[from][to] == 1:
					break
				if G[to][from] == 0:
					break
			if to == n:
				return from

上机题

1. 套汇是指利用汇率差异将一个单位的货币转换为大于一个单位的同种货币. 例如,
假设 1 美元兑换 7.51 人民币, 1 元人民币兑换 0.07 英镑, 1 英镑兑换 2.03
美元, 那么如果一个人拿 1 美元先兑换成人民币, 再把人民币兑换成英镑,
最后把英镑兑换成美元, 则他最后能够得到 1 x 7.51 x 0.07 x 2.03 = 1.07 美元,
从而获得 1.07-1 = 0.07 美元的利润, 就这是套汇. 假设有 n 种货币 v1, v2,
..., vn 和有关汇率的 n x n 矩阵, 其中 A[i,j] 是一单位货币 vi 兑换成货币
vj 的单位数, 要求设计一个程度判断是否存在一个货币序列 vi1, vi2, ..., vik
使得 A[i1,i2] x A[i2,i3] x ... x A[ik,i1] > 1, 如果存在,
则输出所有这样的货币序列; 如果不存在, 则输出空, 并确定算法的时间复杂度.
