习题 2

2. 设 A = (a_1, ..., a_m) 和 B = (b_1, ..., b_n) 均为顺序表, A' 和 B' 分别为 A 和 B 中除去最大共同前缀后的子表. 若 A' = B' = 空表, 则 A = B; 若 A' = 空表, 而 B' != 空表, 或者两者均不为空表, 且 A' 的表首元素小于 B' 的表首元素, 则 A < B; 否则 A > B. 试写一个比较 A, B 大小的算法.

	compare(A, B):
		i = 0
		while i < m and i < n:
			if a[i] < b[i]:
				return "A < B"
			if a[i] > b[i]:
				return "A > B"
			++i
		if m < n:
			return "A < B"
		if m > n:
			return "A > B"
		return "A == B"

3. 设线性表中的数据元素以值递增排列, 并以单链表作为存储结构. 设计一个高效的算法, 删除表中所有值大于 min 且小于 max 的元素, 同时释放被删除结点的空间, 并分析算法的时间复杂度.

	注意检查: 空表、min == max、首元素 > min、尾元素 < max

	delete_range(list, min, max):
		p = list.head # a dummy node
		while p->next != NULL and p->next->value <= min:
			p = p->next
		q = p
		while q->next != NULL and q->next->value < max:
			q = q->next
		head = p->next
		p->next = q->next
		while head != q->next:
			tmp = head
			head = head->next
			delete tmp
	
	复杂度为 O(n).

4. 假设有两个按元素值递增有序排列的线性表 A 和 B, 均以单链表作为其存储结构, 试设计一个算法将 A 和 B 归并成一个按元素值递减有序排列的线性表 C, 并要求利用原表的结点空间构造表 C.

	# suppose A, B has no dummy head node
	reverse_merge(A, B):
		p = NULL
		i = A.head
		j = B.head
		while i and j:
			if i->val <= j->val:
				tmp = i
				i = i->next
			else:
				tmp = j
				j = j->next
			tmp->next = p
			p = tmp
		while i:
			tmp = i
			i = i->next
			tmp->next = p
			p = tmp
		while j:
			tmp = j
			j = j->next
			tmp->next = p
			p = tmp
		return p

7. 已知线性表中元素以值递增有序排列, 并以单链表作为存储结构. 试设计一个算法, 删除表中值相同的多余元素, 使得操作后表中的所有元素值均不相同, 同时释放被删除的结点空间.

	# L has no dummy head node
	unique(L):
		p = L.head
		if !p:
			return
		while p->next:
			if p->next->val == p->val:
				L.erase_after(p)
			else:
				p = p->next

8. 已知两个元素按值递增有序排列的线性表 A 和 B, 且同一表中的元素值各不相同. 试构造一个线性表 C, 其元素为 A 和 B 中元素的交集, 且表 C 中的元素也按值递增有序排列. 设计对 A, B, C 都是顺序表时的算法.

	intersection(A, B):
		C = []
		i = 0
		j = 0
		while i < A.length and j < B.length:
			if A[i] < B[j]:
				++i
			elif A[i] > B[j]:
				++j
			else:
				C.append(A[i])
				++i, ++j
		return C

上机题 2

1. 在示例代码的基础上, 教材上机题 1, 2 视为对单链表增加的方法, 实现方法并测试.
	教材上机题 1: 试设计一个非递归算法在 O(n) 时间内将一个含有 n 个元素的单链表逆置, 要求其辅助空间为常量.

	# L has no dummy head node
	reverse(L):
		if L.empty():
			return
		prev = L.head
		p = L.head->next
		while p:
			next = p->next
			p->next = prev
			prev = p
			p = next
		L.head->next = NULL
		L.head = prev

	教材上机题 2: 给定一个单向链表, 试设计一个既节省时间又节省空间的算法来找出该链表的倒数第 m 个元素. 实现这个算法, 并对可能出现的特殊情况作相应处理. 自行设计链表的数据结构. ("倒数第 m 个元素" 的含义: 当 m = 0 时, 链表的最后一个元素将被返回)

	# L has no dummy head node
	get_last(L, m):
		len = L.length
		return get(len-m-1)

2. 教材上机题3: 设有 n 个人围坐在一个圆桌周围, 现从第 s 个人开始报数, 数到第 m 的人出列, 然后从出列的下一个人重新开始报数, 数到第 m 的人又出列, 如此反复直到所有的人全部出列为止. Josephus 问题是: 对于任意给定的 n, s, m, 求出按出列次序得到的 n 个人员的序列. 试在计算机上模拟 Josephus 问题的求解过程.

	input(n, s, m)
	arr = [1..n]
	cl = CirList(arr, n)
	p = cl.get(n-1)		# last man
	p = cl.next(p, s-1)	# the man before cl[s-1]
	while !cl.empty():
		p = cl.next(p, m-1)
		print(p->next->val)
		cl.erase_after(p)
